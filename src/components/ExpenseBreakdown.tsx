import { Card, CardContent, CardTitle } from "@/components/ui/card";
import { useNavigate } from "react-router-dom";
import type { AggregatedDailyUnit } from "@/server/types";
import { Users, ShoppingCart, Package } from "lucide-react";

interface Props {
  data: AggregatedDailyUnit[];
  from?: string;
  to?: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function normalizeCategoryName(categoryName: string): string {
  return categoryName.trim().toLowerCase();
}

export function ExpenseBreakdown({ data, from, to }: Props) {
  const navigate = useNavigate();
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const navigateToCategory = (categoryType: 'fot' | 'purchases' | 'other') => {
    const params = new URLSearchParams();
    params.append('type', 'expense');
    if (from) params.append('from', from);
    if (to) params.append('to', to);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ç–∏–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    params.append('categoryType', categoryType);
    
    console.log('üîî Navigating to expense category:', categoryType);
    navigate(`/operations?${params.toString()}`);
  };
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Ç—Ä–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const categoryTotals = {
    fot: 0,      // –§–û–¢ - —Ä–∞—Å—Ö–æ–¥—ã —Å–æ —Å—Ç–∞—Ç—å–µ–π —Å–æ–¥–µ—Ä–∂–∞—â–µ–π "–§–û–¢" –∏ "–ó–ø % —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞" + "–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"
    purchases: 0, // –ó–∞–∫—É–ø–∫–∏ - "–ü—Ä–æ–¥—É–∫—Ç—ã" + "–†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
    other: 0      // –û—Å—Ç–∞–ª—å–Ω–æ–µ - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
  };

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  (Array.isArray(data) ? data : []).forEach(record => {
    const expenseDetails = (record as any).expenseDetails;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º categoryDetails –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ —Ä–µ–∞–ª—å–Ω—ã–º —Å—É–º–º–∞–º
    if (expenseDetails && expenseDetails.categoryDetails && Array.isArray(expenseDetails.categoryDetails)) {
      expenseDetails.categoryDetails.forEach((detail: any) => {
        if (!detail.category || !detail.amount) return;
        
        const normalizedCategory = normalizeCategoryName(detail.category);
        const amount = Number(detail.amount) || 0;
        
        // –§–û–¢ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (normalizedCategory.includes('—Ñ–æ—Ç') || 
            normalizedCategory.includes('–∑–ø') || 
            normalizedCategory.includes('—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç') ||
            normalizedCategory.includes('—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä') ||
            normalizedCategory.includes('–ø–µ—Ä—Å–æ–Ω–∞–ª')) {
          categoryTotals.fot += amount;
        }
        // –ó–∞–∫—É–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        else if (normalizedCategory.includes('–ø—Ä–æ–¥—É–∫—Ç') || 
                 normalizedCategory.includes('—Ä–∞—Å—Ö–æ–¥–Ω') ||
                 normalizedCategory.includes('–º–∞—Ç–µ—Ä–∏–∞–ª')) {
          categoryTotals.purchases += amount;
        }
        // –û—Å—Ç–∞–ª—å–Ω–æ–µ
        else {
          categoryTotals.other += amount;
        }
      });
    }
    // Fallback: –µ—Å–ª–∏ –Ω–µ—Ç categoryDetails, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —Å categories
    else if (expenseDetails && expenseDetails.categories && expenseDetails.total > 0) {
      const totalAmount = expenseDetails.total;
      const categories = expenseDetails.categories;
      
      // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –º–µ–∂–¥—É –≤—Å–µ–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
      const amountPerCategory = categories.length > 0 ? totalAmount / categories.length : 0;
      
      categories.forEach((category: string) => {
        if (!category || category.trim() === '') return;
        
        const normalizedCategory = normalizeCategoryName(category);
        
        // –§–û–¢ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (normalizedCategory.includes('—Ñ–æ—Ç') || 
            normalizedCategory.includes('–∑–ø') || 
            normalizedCategory.includes('—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç') ||
            normalizedCategory.includes('—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä') ||
            normalizedCategory.includes('–ø–µ—Ä—Å–æ–Ω–∞–ª')) {
          categoryTotals.fot += amountPerCategory;
        }
        // –ó–∞–∫—É–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        else if (normalizedCategory.includes('–ø—Ä–æ–¥—É–∫—Ç') || 
                 normalizedCategory.includes('—Ä–∞—Å—Ö–æ–¥–Ω') ||
                 normalizedCategory.includes('–º–∞—Ç–µ—Ä–∏–∞–ª')) {
          categoryTotals.purchases += amountPerCategory;
        }
        // –û—Å—Ç–∞–ª—å–Ω–æ–µ
        else {
          categoryTotals.other += amountPerCategory;
        }
      });
    }
  });

  // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const items = [
    { 
      label: "–§–û–¢", 
      value: categoryTotals.fot,
      icon: Users,
      color: "text-blue-500"
    },
    { 
      label: "–ó–∞–∫—É–ø–∫–∏", 
      value: categoryTotals.purchases,
      icon: ShoppingCart,
      color: "text-green-500"
    },
    { 
      label: "–û—Å—Ç–∞–ª—å–Ω–æ–µ", 
      value: categoryTotals.other,
      icon: Package,
      color: "text-orange-500"
    },
  ].filter(item => item.value > 0);

  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
      {items.map((item) => {
        const IconComponent = item.icon;
        const categoryType = item.label === '–§–û–¢' ? 'fot' : item.label === '–ó–∞–∫—É–ø–∫–∏' ? 'purchases' : 'other';
        return (
          <Card 
            key={item.label} 
            className="shadow-card h-20 relative overflow-hidden group cursor-pointer hover:scale-105 transition-transform" 
            onClick={() => navigateToCategory(categoryType)}
            title={`–ö–ª–∏–∫–Ω–∏—Ç–µ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏: ${item.label}`}
          >
            {/* –ë–ª—é—Ä–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –Ω–∞ —Ñ–æ–Ω–µ */}
            <div className="absolute top-1 right-1 opacity-50 blur-[2px] group-hover:blur-[0px] transition-all duration-300 transform rotate-12">
              <IconComponent className={`h-12 w-12 ${item.color}`} />
              </div>
            
            <CardContent className="flex flex-col items-start justify-center h-full py-1 relative z-10">
              <CardTitle className="text-xs text-muted-foreground">{item.label}</CardTitle>
              <div className="text-sm font-semibold text-foreground">
                {Math.round(Number(item.value) || 0).toLocaleString("ru-RU")} ‚ÇΩ
        </div>
      </CardContent>
    </Card>
        );
      })}
    </div>
  );
}
